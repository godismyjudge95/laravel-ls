package evaluator

import (
	"errors"

	"github.com/laravel-ls/laravel-ls/env"
	"github.com/laravel-ls/laravel-ls/parser"
	"github.com/laravel-ls/laravel-ls/treesitter"

	ts "github.com/tree-sitter/go-tree-sitter"
)

// The evaluator is responsible for traversing a concrete syntax tree (CST) generated by the parser (treesitter).
// It processes nodes in the CST to resolve variable values and constructs a map of all variables and values in the file.

type State struct {
	file      *parser.File
	variables map[string]env.Variable
}

func (s *State) variable(node *ts.Node) string {
	id := treesitter.FirstNamedChildOfKind(node, "identifier")
	if id != nil {
		key := id.Utf8Text(s.file.Src)
		if variable, found := s.variables[key]; found {
			return variable.Value
		}
	}
	// Could not resolve the variable.
	// So just return the text for the node.
	return node.Utf8Text(s.file.Src)
}

func (s *State) string(node *ts.Node) (string, error) {
	value := ""
	for ; node != nil; node = node.NextNamedSibling() {
		switch node.Kind() {
		case "variable":
			value += s.variable(node)
		default:
			value += node.Utf8Text(s.file.Src)
		}
	}
	return value, nil
}

func (s *State) value(node *ts.Node) (string, error) {
	switch node.Kind() {
	case "string":
		return s.string(treesitter.FirstNamedChild(node))
	case "variable":
		return s.variable(node), nil
	default:
		return node.Utf8Text(s.file.Src), nil
	}
}

func (s *State) assignment(node *ts.Node) error {
	key := node.ChildByFieldName("key")
	value := node.ChildByFieldName("value")

	if key == nil {
		return errors.New("key expected")
	}

	stringValue := ""
	if value != nil {
		var err error
		stringValue, err = s.value(value)
		if err != nil {
			return err
		}
	} else {
		value = key
	}

	keyName := key.Utf8Text(s.file.Src)
	s.variables[keyName] = env.Variable{
		Value:  stringValue,
		Line:   uint32(value.StartPosition().Row),
		Column: uint32(value.StartPosition().Column),
	}
	return nil
}

func (s *State) evaluate(node *ts.Node) error {
	for ; node != nil; node = node.NextNamedSibling() {
		if node.Kind() == "assignment" {
			err := s.assignment(node)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func Evaluate(file *parser.File) (map[string]env.Variable, error) {
	state := State{
		file:      file,
		variables: map[string]env.Variable{},
	}

	root := file.Tree.Root()
	if root.Kind() == "document" {
		return state.variables, state.evaluate(treesitter.FirstNamedChild(root))
	}
	return nil, errors.New("invalid document")
}
